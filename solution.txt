/**********************************************************************
 * wordstats.cpp - CSCI251 - Ass3 - Contains WordsStats class definition
 * <your name> <your login> <date last modified>
 **********************************************************************/
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <cstring>
#include "wordstats.h"
#include<bits/stdc++.h> 
using namespace std;

WordStats::WordStats(){
	strcpy(Filename,"testdata.txt");
}

// Reads dictionary.txt into Dictionary
void WordStats::ReadDictionary(){
	ifstream theFile("Dictionary.txt");//opening the file object
	int record=0;
	string info; //variable to store each word in the dictionary
	while(theFile>>info){
	 	transform(info.begin(), info.end(), info.begin(), ::tolower); //converts each word to lowercase
		Dictionary.insert(info); //inserting into the Dictionary set
		record++;
	}
cout<<"\n"<<record<<" words read from dictionary\n";	
}

// Displays Dictwords 10 at a time
void WordStats::DisplayDictionary(){
	
	/*READING FROM DICTIONARY SET*/
	
//	cout<<"\nDisplaying the first 20 words from Dictionary\n";
//	set<string>::iterator itr=Dictionary.begin();
//	itr++;
//	for(int i=0; i<20;i++){
//		cout<<*itr<<" "<<endl;
//		itr++;
//	}

	
	//OR
	
	/*READING FROM DICTIONARY TEXT FILE*/
	ifstream theFile("Dictionary.txt");
	int counter=0;
	string info;
	theFile>>info;
	while(theFile>>info && counter!=20){
		cout<<info<<endl;
		counter++;
	}
	
}

// Reads textfile into KnownWords and UnknownWords
void WordStats::ReadTxtFile(){
	ifstream inFile("testData.txt");
	string word;  //word is read from a file
	string newWord; //word changes to newWord which is like a processed
	int pos=0; 	//position is position at which the word occur
	int knownCnt=0; //counter 
	int unknownCnt=0; //counter
	
	while(inFile>>word){
		
	newWord="";
		for(char& c : word){
			if( (c>='a' && c<='z') || (c>='A' && c<='Z')||c=='-'||c=='\'' )
	        newWord+=c;	
		}//removes all the non alphabetical chars from word and form a newWord
		
	transform(newWord.begin(), newWord.end(), newWord.begin(), ::tolower);
	
	const bool is_in = Dictionary.find(newWord) != Dictionary.end(); //checks whether it finds the newWord in Dictionary, it found then it becomes true
		//if (is_in) means its a known word as in it is in the Dictionary
		if(is_in){
			findAndInsert(KnownWords,newWord,pos); //inserts it into known words
			knownCnt++;
			
		}else{
			findAndInsert(UnknownWords,newWord,pos);
			unknownCnt++;	
		}
		
	pos++;
	}
	cout<<knownCnt<<" known words read.\n";
	cout<<unknownCnt<<" unknown words read.\n";
	cout<<pos<<" total words read.\n\n";	
}

// Displays stats of words in KnownWords
void WordStats::DisplayKnownWordStats(){
	DisplayWordMap(KnownWords);	
}

// Displays stats of words in Unknownwords
void WordStats::DisplayUnknownWordStats(){
	DisplayWordMap(UnknownWords);
}

// Displays 20 most frequent words in KnownWords
void WordStats::DisplayMostFreqKnownWords(){
DisplayMostFrequent(KnownWords);
}

// Displays 20 most frequent words in UnknownWords
void WordStats::DisplayMostFreqUnknownWords(){
DisplayMostFrequent(UnknownWords);
}


// Displays original text from KnownWords & UnknownWords
void WordStats::DisplayOriginalText(){
	WordMapIter itr;
	int cur;
	map<int,string> m; // new map with int as key 
	for (itr = KnownWords.begin();  itr != KnownWords.end(); ++itr){ // iterate map again
		string str = (*itr).first; 
		vector<int> vect = (*itr).second;
		for(int i = 0 ; i < vect.size();i++){//loops thru the vector of positions to have all the positions 
			cur=vect[i];
			m.insert(pair<int,string>(cur,str)); // insert with vect[i] as the key
		}
	}
	for (itr = UnknownWords.begin();  itr != UnknownWords.end(); ++itr){ // iterate map again
		string str = (*itr).first;
		vector<int> vect = (*itr).second;
		for(int i = 0 ; i < vect.size();i++){
			cur=vect[i];
			m.insert(pair<int,string>(cur,str)); // insert with vect[i] as the key
		}
	}
	//displaying the map
	map<int,string>::iterator itx;
	for(itx=m.begin(); itx!=m.end();itx++){
		cout<<(*itx).second<<" ";//first is key, second is the value which is the word
	}
	cout<<endl;
}

// ============ Private Fns ========================

void WordStats::findAndInsert(WordMap &W, string str,int pos){
 	WordMapIter itr;
	itr = W.find(str);
			if(itr != W.end())// then already in map... 
				(*itr).second.push_back(pos); // so add index to vector
			else{ // not in map, so insert str and index into map...
				vector<int> vect(1,pos); // construct vector with one element
				W.insert(itr, pair<string, vector<int> >(str,vect)); // typecast ch & vect into a pair and insert it
			}
}

void WordStats::DisplayWordMap(WordMap &W){
	WordMapIter itr;
	cout << setw(25)<<"Word"<<setw(10)<<"Count"<<setw(15)<<"Positions\n";
	for (itr = W.begin();  itr != W.end();  ++itr){//iterate thru the word map
		string str = (*itr).first;
		vector<int> vect = (*itr).second;
		int cnt = vect.size();
		cout << setw(25) << str << setw(10) << cnt << setw(10);
		for (int i=0;i<cnt;i++) 
			cout <<  vect[i] << ' ';
		cout << endl;
	}
	cout << endl;
}

void WordStats::DisplayMostFrequent(WordMap &W){
	WordMapIter itr;
	int counter=0; //breaks the loop when it has printed 10 times
	
	multimap<int,string> m; // new map with int as key 
	for (itr = W.begin();  itr != W.end(); ++itr){ // iterate map again
		string str = (*itr).first;
		int cnt = (*itr).second.size();
		m.insert(pair<int,string>(cnt,str)); // insert with count as the key
	}

	// print out the new map:
	multimap<int,string>::reverse_iterator itx; // iterator for new map
	cout <<setw(15)<< "Word"<<setw(10)<<"Count\n";
	for (itx = m.rbegin(); itx != m.rend(); ++itx){
		
		string str = (*itx).second;
		int cnt = (*itx).first;
		cout << setw(15) << str <<setw(10)<< cnt << endl;
		counter++;
		if(counter==10)
			break;
		
	}
	cout << endl;
}


/**********************************************************************
 * wordstats.h - CSCI251 - Ass3 - Contains WordStats class declaration
 * <your name> <your login> <date last modified>
 **********************************************************************/
#ifndef WORDSTATS_H_
#define WORDSTATS_H_

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <set>
using namespace std;

// Definition of data contained in BinaryTree


typedef map<string, vector<int> > WordMap;
typedef WordMap::iterator WordMapIter;

class WordStats
{
	public:
		WordStats();
		void ReadDictionary();
		void DisplayDictionary();
		void ReadTxtFile();
		void DisplayKnownWordStats();
		void DisplayUnknownWordStats();
		void DisplayMostFreqKnownWords();
		void DisplayMostFreqUnknownWords();
		void DisplayOriginalText();
	private:
		WordMap KnownWords;
		WordMap UnknownWords;
		set<string> Dictionary;
		char Filename[256];
		
		//add your private fns here
		void findAndInsert(WordMap &W, string str,int pos);
		void DisplayWordMap(WordMap &W);
		void DisplayMostFrequent(WordMap &W);
		
};

#endif

